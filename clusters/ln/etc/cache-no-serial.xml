<?xml version="1.0" encoding="UTF-8"?>
<cache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://geode.apache.org/schema/cache" xsi:schemaLocation="http://geode.apache.org/schema/cache 
http://geode.apache.org/schema/cache/cache-1.0.xsd" version="1.0" lock-lease="120" lock-timeout="60" search-timeout="300" is-server="false" copy-on-read="false">

	<!-- ======= Gateway senders ======= -->
	<!-- Parallel event queue for summary -->
	<gateway-sender id="ln-to-ny-summary" remote-distributed-system-id="1" 
		parallel="true" dispatcher-threads="5" maximum-queue-memory="150"></gateway-sender>
	<!-- Parallel event queue -->
	<gateway-sender id="ln-to-ny-parallel" remote-distributed-system-id="1" 
		parallel="true" dispatcher-threads="5" maximum-queue-memory="150"></gateway-sender>
	<!-- Customers event queue -->
	<gateway-sender id="ln-to-ny-customers" remote-distributed-system-id="1" 
		parallel="true" dispatcher-threads="5" maximum-queue-memory="150"></gateway-sender>

	<!-- Gateway receiver -->
	<gateway-receiver start-port="50520" end-port="50530"></gateway-receiver>

	<!-- cache-server port is assigned by geode-addon at member startup.
	     If you have a multi-homed machine then make sure to set the bind-address
	     and hostname-for-clients attributes with the proper IP address. -->
	<cache-server port="${geode-addon.server.port}" />
	
	<!-- Partition resolver for co-locating customers data. The key
	     must be a string key with the second token set to the customer ID.
	     For example, an order key, 'k123.000000-0001', shows '000000-0001' 
	     as a customer ID. The default delimiter is '.'-->
	<region-attributes id="customerIdentityKey">
		<partition-attributes colocated-with="/nw/customers">
			<partition-resolver>
				<class-name>org.apache.geode.addon.cluster.cache.IdentityKeyPartitionResolver</class-name>
				<parameter name="indexes">
					<string>1</string>
				</parameter>
			</partition-resolver>
		</partition-attributes>
	</region-attributes> 

	<!-- PBM example regions accessed by the perf_test app's
	     DataIngestionTest (bin_sh/test_ingestion) and 
	     TransactionTest (bin_sh/test_tx). -->
	<region name="eligibility" refid="PARTITION"></region>
	<region name="profile" refid="PARTITION"></region>
	<region name="summary" refid="PARTITION">
		<region-attributes gateway-sender-ids="ln-to-ny-summary" />
	</region>

	<!-- Microsoft's Northwind data regions accessed by the perf_test app. -->
	<region name="nw">
		<region name="categories" refid="PARTITION"></region>
		<region name="customers" refid="PARTITION">
			<region-attributes gateway-sender-ids="ln-to-ny-customers" />
		</region>
		<region name="employees" refid="PARTITION"></region>
		<region name="employee_territories" refid="PARTITION"></region>
		<region name="orders" refid="PARTITION">
			<region-attributes refid="customerIdentityKey" gateway-sender-ids="ln-to-ny-customers" />
		</region>
		<region name="order_details" refid="PARTITION"></region>
		<region name="products" refid="PARTITION"></region>
		<region name="regions" refid="PARTITION"></region>
		<region name="shippers" refid="PARTITION"></region>
		<region name="suppliers" refid="PARTITION"></region>
		<region name="territories" refid="PARTITION"></region>
	</region>

	<!-- Example regions accessed by the perf_test app's GroupTest (bin_sh/test_group) -->
	<region name="map1" refid="PARTITION">
		<region-attributes gateway-sender-ids="ln-to-ny-parallel" />
	</region>
	<region name="map2" refid="PARTITION">
		<region-attributes gateway-sender-ids="ln-to-ny-serial" />
	</region>
	<region name="map3" refid="PARTITION"></region>
	<region name="map4" refid="PARTITION"></region>
	<region name="map5" refid="PARTITION"></region>
	<region name="map6" refid="PARTITION"></region>
	<region name="map7" refid="PARTITION"></region>
	<region name="map8" refid="PARTITION"></region>
	<region name="map9" refid="PARTITION"></region>
	<region name="map10" refid="PARTITION"></region>
	<region name="map11" refid="PARTITION"></region>
	<region name="map12" refid="PARTITION"></region>
	<region name="map13" refid="PARTITION"></region>
	<region name="map14" refid="PARTITION"></region>
	<region name="map15" refid="PARTITION"></region>
	<region name="map16" refid="PARTITION"></region>
	<region name="map17" refid="PARTITION"></region>
	<region name="map18" refid="PARTITION"></region>
	<region name="map19" refid="PARTITION"></region>
	<region name="map20" refid="PARTITION"></region>
	<region name="map21" refid="PARTITION"></region>
	<region name="map22" refid="PARTITION"></region>

	<function-service>
		<!-- ClearFunction clears the specified region. Geode does not permit clearing 
			partitioned regions. Furthermore, clients are not permitted to clear remote
			regions. This function allows clients to clear both partitioned and replicated
			regions. -->
		<function>
            <class-name>org.apache.geode.addon.function.ClearFunction</class-name>
        </function>
        <!-- QueryFunction executes OQL with joins on co-located regions. -->
		<function>
			<class-name>org.apache.geode.addon.function.QueryFunction</class-name>
		</function>
		<!-- EligFunction invoked by TransationTest (bin_sh/test_tx). -->
		<function>
			<class-name>org.apache.geode.addon.test.perf.EligFunction</class-name>
		</function>
	</function-service>
</cache>
